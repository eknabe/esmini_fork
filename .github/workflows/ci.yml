name: Continuous Integration

permissions:
  contents: write

on:
  push:
    branches:
      - master
      - dev
      - 'feature/**'
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

  pull_request:
    branches:
      - master
      - dev

  workflow_dispatch:

jobs:
  test:

    strategy:
      matrix:
        os: [windows-2022]
        configuration: [Release]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-tags: true
          fetch-depth: 200
          ref: ${{ github.ref }}

      - uses: ./.github/actions/setup_tools_shared

      # Generate build number based on offset from former AppVeyor CI machine
      - uses: ./.github/actions/generate_offset_run_number

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            externals/googletest
            externals/osg
            externals/osi
            externals/sumo
            externals/implot
            resources/models
          key: ${{ runner.os }}-external-resources

      - name: CMake Configure - Default
        if: runner.os != 'macOS'
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])-test" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.configuration }} -DESMINI_BUILD_VERSION=${{ env.BUILD_NUMBER }}

      - name: CMake Configure - macOS
        if: runner.os == 'macOS'
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])-test" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.configuration }} -DESMINI_BUILD_VERSION=${{ env.BUILD_NUMBER }} -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"

      - name: CMake Build
        run: cmake --build build --config ${{ matrix.configuration }} --target install -j 2

      - name: Compile minimal C example
        if: runner.os == 'Linux'
        run: |
          echo -e '#include "esminiLib.hpp"\n\nint main()\n{\n    return 0;\n}' > pure-c.c
          gcc pure-c.c -I EnvironmentSimulator/Libraries/esminiLib/ ./bin/libesminiLib.so -o pure-c
          ./pure-c

      - name: CMake Build OSMP FMU
        if: runner.os == 'Linux'
        run: |
          cd OSMP_FMU
          mkdir build
          cd build
          cmake ..
          cmake --build . -j2

      - name: Validate OSMP FMU
        if: runner.os == 'Linux'
        run: |
          cd OSMP_FMU/build
          python3 -m venv .venv
          source .venv/bin/activate
          pip3 install fmpy
          fmpy validate esmini.fmu

      - name: Run OSMP FMU
        if: runner.os == 'Linux'
        run: |
          cd OSMP_FMU/build
          python3 -m venv .venv
          source .venv/bin/activate
          pip3 install fmpy
          fmpy simulate esmini.fmu --start-values xosc_path ../../resources/xosc/cut-in.xosc

      - name: Run Tests - Unix
        if: runner.os != 'Windows'
        # Use xvfb on Linux only
        run: ${{ matrix.os == 'ubuntu-22.04' && 'xvfb-run' || '' }} ./scripts/run_tests.sh -b ${{ matrix.configuration }} -p

      - name: Run Tests - Windows
        if: runner.os == 'Windows'
        env:
          GALLIUM_DRIVER: softpipe
          MESA_GL_VERSION_OVERRIDE: 4.5
        shell: bash
        run: ./scripts/run_tests.sh -b ${{ matrix.configuration }} -p

      - uses: ./.github/actions/upload_esmini_artifacts
        if: matrix.configuration == 'Release'

      # - name: Debugging with tmate
      #   if: ${{ failure() }}
      #   uses: mxschmitt/action-tmate@v3

  release:
    needs: [test]
    if: github.ref_type == 'tag'

    strategy:
      matrix:
        os: [windows-2022]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: ${{ github.ref }}

      # Generate build number based on offset from former AppVeyor CI machine
      - uses: ./.github/actions/generate_offset_run_number

      - uses: actions/download-artifact@v4.1.7
        with:
          name: esmini-bin_${{ runner.os }}

      - uses: actions/download-artifact@v4.1.7
        with:
          name: esmini-demo_${{ runner.os }}

      - name: Set version from tag
        shell: bash
        run: echo "ESMINI_VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: 'esmini ${{ env.ESMINI_VERSION }} (build ${{ env.BUILD_NUMBER }})'
          body: 'Demo and binaries. For information about changes and new features see [release notes](https://github.com/esmini/esmini/blob/master/release_notes.md).'
          files: |
            esmini-bin_${{ runner.os }}.zip
            esmini-demo_${{ runner.os }}.zip
